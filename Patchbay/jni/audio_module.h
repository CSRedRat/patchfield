/*
 * Copyright 2013 Google Inc. All Rights Reserved.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not
 * use this file except in compliance with the License. You may obtain a copy
 * of the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations
 * under the License.
 */

/*
 * Native library for use with the native components of subclasses of
 * AudioModule.java. Audio modules must implement a process callback of type
 * audio_module_process_t and hook up functions in this library to the
 * corresponding abstract methods in the Java class. See LowpassModule.java and
 * samples/lowpass.{h,c} for an example of this interaction.
 */

#ifndef __AUDIO_MODULE_H__
#define __AUDIO_MODULE_H__
#ifdef __cplusplus
extern "C" {
#endif

/*
 * The current protocol version. Service and modules must be compiled against the
 * same version of this library to properly work together.
 */
#define PATCHBAY_PROTOCOL_VERSION 6

/*
 * Processing callback; takes a processing context (which is just a pointer to
 * whatever data you want to pass to the callback), the sample rate, the buffer
 * size in frames, the number of input and output channels, as well as input
 * and output buffers whose size is the number of channels times the number of
 * frames per buffer. Buffers are non-interleaved.
 *
 * This function will be invoked on a dedicated audio thread, and so any data
 * in the context that may be modified concurrently must be protected (e.g., by
 * gcc atomics) to prevent race conditions.
 */
typedef void (*audio_module_process_t)
    (void *context, int sample_rate, int buffer_frames,
     int input_channels, const float *input_buffer,
     int output_channels, float *output_buffer);

/*
 * Abstract data type representing the local data structure connecting an
 * audio module to its representation in the Patchbay service.
 */
typedef struct _audio_module_runner audio_module_runner;

/*
 * Creates the local data structure that provides the glue between the audio
 * module and the Patchbay service, as well as a rendering thread for this
 * module.  The version, token, and index define the connection to the Patchbay
 * and are implicitly generated by the configure method of AudioModule.java.
 *
 * The context will be passed to the processing callback on each invocation.
 * Ownership of the context remains with the caller. The context is optional
 * and may be NULL.
 *
 * Returns a pointer to the local data structure on success, or NULL on
 * failure.
 */
audio_module_runner *am_create(int version, int token, int index,
    audio_module_process_t process, void *context);

/*
 * Releases all resources allocated in am_create. The caller is still
 * responsible for releasing resources held by the rendering context.
 */
void am_release(audio_module_runner *p);

/*
 * Returns a nonzero value if the audio module has timed out.
 */
int am_has_timed_out(audio_module_runner *p);

/*
 * Returns the sample rate at which this audio module operates.
 */
int am_get_sample_rate(audio_module_runner *p);

/*
 * Returns the buffer size in frames at which this audio module operates.
 */
int am_get_buffer_frames(audio_module_runner *p);

#ifdef __cplusplus
}
#endif
#endif
